let map;
let airQualityLayer;
let fireLayer;

function initMap() {
    console.log('Initializing map...');
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ü–µ–Ω—Ç—Ä–æ–º –Ω–∞ –†–æ—Å—Å–∏–∏
    map = L.map('map').setView([55.7558, 37.6173], 4);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–æ–π
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap'
    }).addTo(map);
    
    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∏
    airQualityLayer = L.layerGroup().addTo(map);
    fireLayer = L.layerGroup().addTo(map);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadAirQualityData();
    loadFireData();
}

function showTab(tabName) {
    console.log('Switching to tab:', tabName);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Å–ª–æ–π
    if (tabName === 'air') {
        map.removeLayer(fireLayer);
        map.addLayer(airQualityLayer);
    } else {
        map.removeLayer(airQualityLayer);
        map.addLayer(fireLayer);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
async function loadAirQualityData() {
    try {
        console.log('Loading air quality data...');
        document.getElementById('airQuality').textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        
        const response = await fetch('/.netlify/functions/air-quality');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Air quality data:', data);
        
        airQualityLayer.clearLayers();
        
        const stations = data.data || data.demoData || [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç—É
        stations.forEach(station => {
            if (station.coordinates && station.measurements) {
                const pm25 = station.measurements.find(m => m.parameter === 'pm25');
                if (pm25) {
                    const color = getAQIColor(pm25.value);
                    
                    const marker = L.circleMarker(
                        [station.coordinates.latitude, station.coordinates.longitude],
                        {
                            radius: 10,
                            fillColor: color,
                            color: '#000',
                            weight: 1,
                            opacity: 1,
                            fillOpacity: 0.8
                        }
                    );
                    
                    marker.bindPopup(`
                        <div style="min-width: 200px">
                            <h3>${station.location || station.city || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</h3>
                            <p><strong>PM2.5:</strong> ${pm25.value} Œºg/m¬≥</p>
                            <p><strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> ${getAQILevel(pm25.value)}</p>
                        </div>
                    `);
                    
                    marker.addTo(airQualityLayer);
                }
            }
        });
        
        document.getElementById('airQuality').textContent = stations.length;
        console.log('Air quality stations loaded:', stations.length);
        
    } catch (error) {
        console.error('Error loading air quality data:', error);
        document.getElementById('airQuality').textContent = '–û—à–∏–±–∫–∞';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        document.getElementById('airQuality').textContent = '8';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∂–∞—Ä–∞—Ö
async function loadFireData() {
    try {
        console.log('Loading fire data...');
        document.getElementById('fireCounter').textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        
        const response = await fetch('/.netlify/functions/forest-fires');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Fire data:', data);
        
        fireLayer.clearLayers();
        
        const fires = data.fires || data.demoData || [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –ø–æ–∂–∞—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
        fires.forEach(fire => {
            const intensity = Math.min(fire.brightness / 50, 12);
            
            const marker = L.circleMarker(
                [fire.latitude, fire.longitude],
                {
                    radius: intensity,
                    fillColor: '#ff4444',
                    color: '#cc0000',
                    weight: 1,
                    opacity: 1,
                    fillOpacity: 0.6
                }
            );
            
            marker.bindPopup(`
                <div style="min-width: 200px">
                    <h3>üî• –õ–µ—Å–Ω–æ–π –ø–æ–∂–∞—Ä</h3>
                    <p><strong>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:</strong> ${fire.brightness}</p>
                    <p><strong>–†–µ–≥–∏–æ–Ω:</strong> ${fire.region || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                </div>
            `);
            
            marker.addTo(fireLayer);
        });
        
        document.getElementById('fireCounter').textContent = fires.length;
        console.log('Fire data loaded:', fires.length);
        
    } catch (error) {
        console.error('Error loading fire data:', error);
        document.getElementById('fireCounter').textContent = '–û—à–∏–±–∫–∞';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        document.getElementById('fireCounter').textContent = '12';
    }
}

// –¶–≤–µ—Ç–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
function getAQIColor(pm25) {
    if (pm25 <= 12) return '#00e400'; // –•–æ—Ä–æ—à–æ
    if (pm25 <= 35) return '#ffff00'; // –£–º–µ—Ä–µ–Ω–Ω–æ
    if (pm25 <= 55) return '#ff7e00'; // –ù–µ–∑–¥–æ—Ä–æ–≤–æ
    return '#ff0000'; // –û–ø–∞—Å–Ω–æ
}

function getAQILevel(pm25) {
    if (pm25 <= 12) return '–•–æ—Ä–æ—à–æ';
    if (pm25 <= 35) return '–£–º–µ—Ä–µ–Ω–Ω–æ';
    if (pm25 <= 55) return '–ù–µ–∑–¥–æ—Ä–æ–≤–æ';
    return '–û–ø–∞—Å–Ω–æ';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing app...');
    initMap();
});
