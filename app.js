let map;
let airQualityLayer;
let fireLayer;
let currentTab = 'air';

function initMap() {
    console.log('Initializing map...');
    
    const mapElement = document.getElementById('map');
    if (!mapElement) {
        console.error('Map container #map not found');
        return;
    }
    
    try {
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –≤–∏–¥–æ–º –Ω–∞ –≤–µ—Å—å –º–∏—Ä
        map = L.map('map').setView([30, 0], 2);
        
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors',
            maxZoom: 18
        }).addTo(map);
        
        airQualityLayer = L.layerGroup().addTo(map);
        fireLayer = L.layerGroup().addTo(map);
        
        console.log('Map initialized successfully');
        
        loadAirQualityData();
        loadFireData();
        
    } catch (error) {
        console.error('Error initializing map:', error);
    }
}
// –ù–ê–ô–¢–ò —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é showTab –∏ –û–ë–ù–û–í–ò–¢–¨:

function showTab(tabName, event) {
    console.log('Switching to tab:', tabName);
    
    if (!map) {
        console.error('Map not initialized');
        return;
    }
    
    currentTab = tabName;
    
    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    if (event && event.target) {
        event.target.classList.add('active');
    } else {
        // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£:
        document.querySelector(`.tab-btn[onclick*="${tabName}"]`).classList.add('active');
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–æ–µ–≤ –∫–∞—Ä—Ç—ã (–æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if (tabName === 'air') {
        if (map.hasLayer(fireLayer)) {
            map.removeLayer(fireLayer);
        }
        if (!map.hasLayer(airQualityLayer)) {
            map.addLayer(airQualityLayer);
        }
    } else {
        if (map.hasLayer(airQualityLayer)) {
            map.removeLayer(airQualityLayer);
        }
        if (!map.hasLayer(fireLayer)) {
            map.addLayer(fireLayer);
        }
    }
}

async function loadAirQualityData() {
    try {
        console.log('Loading air quality data...');
        const airQualityElement = document.getElementById('airQuality');
        if (airQualityElement) {
            airQualityElement.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 8000);
        
        let realDataLoaded = false;
        
        try {
            const response = await fetch('/api/air-quality', {
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (response.ok) {
                const data = await response.json();
                console.log('Real air quality data received:', data);
                
                if (airQualityLayer && data.data && data.data.length > 0) {
                    airQualityLayer.clearLayers();
                    
                    let validStationsCount = 0;
                    
                    data.data.forEach(station => {
                        try {
                            if (station.coordinates && 
                                typeof station.coordinates.latitude === 'number' && 
                                typeof station.coordinates.longitude === 'number' &&
                                station.measurements) {
                                
                                const pm25 = station.measurements.find(m => m.parameter === 'pm25');
                                if (pm25 && !isNaN(pm25.value) && pm25.value >= 0) {
                                    const color = getAQIColor(pm25.value);
                                    
                                    const marker = L.circleMarker(
                                        [station.coordinates.latitude, station.coordinates.longitude],
                                        {
                                            radius: getStationSize(pm25.value),
                                            fillColor: color,
                                            color: '#000',
                                            weight: 1,
                                            opacity: 0.8,
                                            fillOpacity: 0.7
                                        }
                                    );
                                    
                                    const cityName = station.location || station.city || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                                    const country = station.country || '';
                                    
                                    marker.bindPopup(`
                                        <div style="min-width: 220px">
                                            <h3>${cityName}</h3>
                                            ${country ? `<p><strong>–°—Ç—Ä–∞–Ω–∞:</strong> ${country}</p>` : ''}
                                            <p><strong>PM2.5:</strong> ${pm25.value} Œºg/m¬≥</p>
                                            <p><strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> ${getAQILevel(pm25.value)}</p>
                                            <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> ${data.source || 'OpenAQ'}</p>
                                        </div>
                                    `);
                                    
                                    marker.addTo(airQualityLayer);
                                    validStationsCount++;
                                }
                            }
                        } catch (stationError) {
                            console.warn('Error processing station:', station, stationError);
                        }
                    });
                    
                    if (airQualityElement) {
                        airQualityElement.textContent = validStationsCount;
                    }
                    
                    if (validStationsCount > 0) {
                        realDataLoaded = true;
                        showNotification('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞', 'success');
                        return;
                    }
                }
            }
        } catch (error) {
            console.log('Real air quality data failed:', error);
        }
        
        // –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        if (!realDataLoaded) {
            showDemoAirQuality();
        }
        
    } catch (error) {
        console.error('Error loading air quality data:', error);
        showDemoAirQuality();
    }
}

async function loadFireData() {
    try {
        console.log('Loading fire data...');
        const fireCounterElement = document.getElementById('fireCounter');
        if (fireCounterElement) {
            fireCounterElement.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 8000);
        
        let realDataLoaded = false;
        
        try {
            const response = await fetch('/api/forest-fires', {
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (response.ok) {
                const data = await response.json();
                console.log('Real fire data received:', data);
                
                if (fireLayer && data.fires && data.fires.length > 0) {
                    fireLayer.clearLayers();
                    
                    let validFiresCount = 0;
                    
                    data.fires.forEach(fire => {
                        try {
                            if (fire.latitude && fire.longitude && fire.brightness) {
                                const intensity = Math.min(Math.max(fire.brightness / 30, 4), 12);
                                
                                const marker = L.circleMarker(
                                    [fire.latitude, fire.longitude],
                                    {
                                        radius: intensity,
                                        fillColor: '#ff4444',
                                        color: '#cc0000',
                                        weight: 1,
                                        opacity: 0.9,
                                        fillOpacity: 0.7
                                    }
                                );
                                
                                const region = fire.region || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                                const country = fire.country || '';
                                const date = fire.date ? new Date(fire.date).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                                
                                marker.bindPopup(`
                                    <div style="min-width: 220px">
                                        <h3>üî• –õ–µ—Å–Ω–æ–π –ø–æ–∂–∞—Ä</h3>
                                        ${country ? `<p><strong>–°—Ç—Ä–∞–Ω–∞:</strong> ${country}</p>` : ''}
                                        <p><strong>–†–µ–≥–∏–æ–Ω:</strong> ${region}</p>
                                        <p><strong>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:</strong> ${Math.round(fire.brightness)}</p>
                                        <p><strong>–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:</strong> ${date}</p>
                                        <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> ${data.source || 'NASA FIRMS'}</p>
                                    </div>
                                `);
                                
                                marker.addTo(fireLayer);
                                validFiresCount++;
                            }
                        } catch (fireError) {
                            console.warn('Error processing fire data:', fire, fireError);
                        }
                    });
                    
                    if (fireCounterElement) {
                        fireCounterElement.textContent = validFiresCount.toLocaleString();
                    }
                    
                    if (validFiresCount > 0) {
                        realDataLoaded = true;
                        showNotification('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∂–∞—Ä–∞—Ö', 'success');
                        return;
                    }
                }
            }
        } catch (error) {
            console.log('Real fire data failed:', error);
        }
        
        // –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        if (!realDataLoaded) {
            showDemoFireData();
        }
        
    } catch (error) {
        console.error('Error loading fire data:', error);
        showDemoFireData();
    }
}

function showDemoAirQuality() {
    console.log('Showing demo air quality data');
    const airQualityElement = document.getElementById('airQuality');
    if (airQualityElement) {
        airQualityElement.textContent = '156';
    }
    
    // –î–µ–º–æ-—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
    const demoStations = [
        // –ï–≤—Ä–æ–ø–∞ (15 —Å—Ç–∞–Ω—Ü–∏–π)
        { name: "–ú–æ—Å–∫–≤–∞", lat: 55.7558, lng: 37.6173, pm25: 15 },
        { name: "–õ–æ–Ω–¥–æ–Ω", lat: 51.5074, lng: -0.1278, pm25: 12 },
        { name: "–ü–∞—Ä–∏–∂", lat: 48.8566, lng: 2.3522, pm25: 18 },
        { name: "–ë–µ—Ä–ª–∏–Ω", lat: 52.5200, lng: 13.4050, pm25: 14 },
        { name: "–ú–∞–¥—Ä–∏–¥", lat: 40.4168, lng: -3.7038, pm25: 16 },
        { name: "–†–∏–º", lat: 41.9028, lng: 12.4964, pm25: 20 },
        { name: "–ö–∏–µ–≤", lat: 50.4501, lng: 30.5234, pm25: 22 },
        { name: "–í–∞—Ä—à–∞–≤–∞", lat: 52.2297, lng: 21.0122, pm25: 19 },
        { name: "–ü—Ä–∞–≥–∞", lat: 50.0755, lng: 14.4378, pm25: 17 },
        { name: "–í–µ–Ω–∞", lat: 48.2082, lng: 16.3738, pm25: 16 },
        { name: "–ê–º—Å—Ç–µ—Ä–¥–∞–º", lat: 52.3676, lng: 4.9041, pm25: 15 },
        { name: "–°—Ç–æ–∫–≥–æ–ª—å–º", lat: 59.3293, lng: 18.0686, pm25: 11 },
        { name: "–û—Å–ª–æ", lat: 59.9139, lng: 10.7522, pm25: 10 },
        { name: "–•–µ–ª—å—Å–∏–Ω–∫–∏", lat: 60.1699, lng: 24.9384, pm25: 12 },
        { name: "–ê—Ñ–∏–Ω—ã", lat: 37.9838, lng: 23.7275, pm25: 25 },

        // –ê–∑–∏—è (15 —Å—Ç–∞–Ω—Ü–∏–π)
        { name: "–ü–µ–∫–∏–Ω", lat: 39.9042, lng: 116.4074, pm25: 45 },
        { name: "–¢–æ–∫–∏–æ", lat: 35.6762, lng: 139.6503, pm25: 22 },
        { name: "–°–µ—É–ª", lat: 37.5665, lng: 126.9780, pm25: 25 },
        { name: "–î–µ–ª–∏", lat: 28.6139, lng: 77.2090, pm25: 38 },
        { name: "–ú—É–º–±–∞–∏", lat: 19.0760, lng: 72.8777, pm25: 35 },
        { name: "–ë–∞–Ω–≥–∫–æ–∫", lat: 13.7563, lng: 100.5018, pm25: 32 },
        { name: "–°–∏–Ω–≥–∞–ø—É—Ä", lat: 1.3521, lng: 103.8198, pm25: 20 },
        { name: "–î–∂–∞–∫–∞—Ä—Ç–∞", lat: -6.2088, lng: 106.8456, pm25: 40 },
        { name: "–ú–∞–Ω–∏–ª–∞", lat: 14.5995, lng: 120.9842, pm25: 28 },
        { name: "–ö—É–∞–ª–∞-–õ—É–º–ø—É—Ä", lat: 3.1390, lng: 101.6869, pm25: 26 },
        { name: "–î—É–±–∞–π", lat: 25.2048, lng: 55.2708, pm25: 30 },
        { name: "–¢–µ–≥–µ—Ä–∞–Ω", lat: 35.6892, lng: 51.3890, pm25: 42 },
        { name: "–ë–∞–≥–¥–∞–¥", lat: 33.3152, lng: 44.3661, pm25: 48 },
        { name: "–≠—Ä-–†–∏—è–¥", lat: 24.7136, lng: 46.6753, pm25: 35 },
        { name: "–ê–Ω–∫–∞—Ä–∞", lat: 39.9334, lng: 32.8597, pm25: 29 },

        // –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ (15 —Å—Ç–∞–Ω—Ü–∏–π)
        { name: "–ù—å—é-–ô–æ—Ä–∫", lat: 40.7128, lng: -74.0060, pm25: 13 },
        { name: "–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å", lat: 34.0522, lng: -118.2437, pm25: 28 },
        { name: "–ß–∏–∫–∞–≥–æ", lat: 41.8781, lng: -87.6298, pm25: 16 },
        { name: "–¢–æ—Ä–æ–Ω—Ç–æ", lat: 43.6532, lng: -79.3832, pm25: 11 },
        { name: "–ú–µ—Ö–∏–∫–æ", lat: 19.4326, lng: -99.1332, pm25: 35 },
        { name: "–ú–∞–π–∞–º–∏", lat: 25.7617, lng: -80.1918, pm25: 14 },
        { name: "–í–∞–Ω–∫—É–≤–µ—Ä", lat: 49.2827, lng: -123.1207, pm25: 9 },
        { name: "–í–∞—à–∏–Ω–≥—Ç–æ–Ω", lat: 38.9072, lng: -77.0369, pm25: 15 },
        { name: "–ë–æ—Å—Ç–æ–Ω", lat: 42.3601, lng: -71.0589, pm25: 12 },
        { name: "–°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ", lat: 37.7749, lng: -122.4194, pm25: 18 },
        { name: "–ê—Ç–ª–∞–Ω—Ç–∞", lat: 33.7490, lng: -84.3880, pm25: 17 },
        { name: "–î–∞–ª–ª–∞—Å", lat: 32.7767, lng: -96.7970, pm25: 19 },
        { name: "–î–µ–Ω–≤–µ—Ä", lat: 39.7392, lng: -104.9903, pm25: 16 },
        { name: "–§–∏–Ω–∏–∫—Å", lat: 33.4484, lng: -112.0740, pm25: 22 },
        { name: "–°–∏—ç—Ç–ª", lat: 47.6062, lng: -122.3321, pm25: 13 },

        // –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑-–∑–∞ –ø–æ–∂–∞—Ä–æ–≤ (12 —Å—Ç–∞–Ω—Ü–∏–π)
        { name: "–°–∞–Ω-–ü–∞—É–ª—É", lat: -23.5505, lng: -46.6333, pm25: 65 },
        { name: "–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å", lat: -34.6037, lng: -58.3816, pm25: 58 },
        { name: "–õ–∏–º–∞", lat: -12.0464, lng: -77.0428, pm25: 72 },
        { name: "–ë–æ–≥–æ—Ç–∞", lat: 4.7110, lng: -74.0721, pm25: 68 },
        { name: "–†–∏–æ-–¥–µ-–ñ–∞–Ω–µ–π—Ä–æ", lat: -22.9068, lng: -43.1729, pm25: 63 },
        { name: "–°–∞–Ω—Ç—å—è–≥–æ", lat: -33.4489, lng: -70.6693, pm25: 78 },
        { name: "–ö–∞—Ä–∞–∫–∞—Å", lat: 10.4806, lng: -66.9036, pm25: 55 },
        { name: "–ö–∏—Ç–æ", lat: -0.1807, lng: -78.4678, pm25: 48 },
        { name: "–ú–æ–Ω—Ç–µ–≤–∏–¥–µ–æ", lat: -34.9011, lng: -56.1645, pm25: 52 },
        { name: "–õ–∞-–ü–∞—Å", lat: -16.4897, lng: -68.1193, pm25: 45 },
        { name: "–ë—Ä–∞–∑–∏–ª–∏–∞", lat: -15.7975, lng: -47.8919, pm25: 70 },
        { name: "–ê—Å—É–Ω—Å—å–æ–Ω", lat: -25.2637, lng: -57.5759, pm25: 60 },

        // –ê—Ñ—Ä–∏–∫–∞ (10 —Å—Ç–∞–Ω—Ü–∏–π)
        { name: "–ö–∞–∏—Ä", lat: 30.0444, lng: 31.2357, pm25: 42 },
        { name: "–õ–∞–≥–æ—Å", lat: 6.5244, lng: 3.3792, pm25: 37 },
        { name: "–ô–æ—Ö–∞–Ω–Ω–µ—Å–±—É—Ä–≥", lat: -26.2041, lng: 28.0473, pm25: 33 },
        { name: "–ù–∞–π—Ä–æ–±–∏", lat: -1.2864, lng: 36.8172, pm25: 28 },
        { name: "–ö–µ–π–ø—Ç–∞—É–Ω", lat: -33.9249, lng: 18.4241, pm25: 19 },
        { name: "–ê–∫–∫—Ä–∞", lat: 5.6037, lng: -0.1870, pm25: 31 },
        { name: "–ê–¥–∏—Å-–ê–±–µ–±–∞", lat: 9.0300, lng: 38.7400, pm25: 35 },
        { name: "–î–∞—Ä-—ç—Å-–°–∞–ª–∞–º", lat: -6.7924, lng: 39.2083, pm25: 30 },
        { name: "–ê–ª–∂–∏—Ä", lat: 36.7538, lng: 3.0588, pm25: 29 },
        { name: "–ö–∞—Å–∞–±–ª–∞–Ω–∫–∞", lat: 33.5731, lng: -7.5898, pm25: 26 },

        // –ê–≤—Å—Ç—Ä–∞–ª–∏—è –∏ –û–∫–µ–∞–Ω–∏—è - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑-–∑–∞ –ø–æ–∂–∞—Ä–æ–≤ (8 —Å—Ç–∞–Ω—Ü–∏–π)
        { name: "–°–∏–¥–Ω–µ–π", lat: -33.8688, lng: 151.2093, pm25: 85 },
        { name: "–ú–µ–ª—å–±—É—Ä–Ω", lat: -37.8136, lng: 144.9631, pm25: 78 },
        { name: "–ë—Ä–∏—Å–±–µ–Ω", lat: -27.4698, lng: 153.0251, pm25: 82 },
        { name: "–ü–µ—Ä—Ç", lat: -31.9505, lng: 115.8605, pm25: 65 },
        { name: "–ê–¥–µ–ª–∞–∏–¥–∞", lat: -34.9285, lng: 138.6007, pm25: 72 },
        { name: "–ö–∞–Ω–±–µ—Ä—Ä–∞", lat: -35.2809, lng: 149.1300, pm25: 88 },
        { name: "–î–∞—Ä–≤–∏–Ω", lat: -12.4634, lng: 130.8456, pm25: 58 },
        { name: "–û–∫–ª–µ–Ω–¥", lat: -36.8485, lng: 174.7633, pm25: 45 }
    ];
    
    if (airQualityLayer) {
        airQualityLayer.clearLayers();
        
        demoStations.forEach(station => {
            const color = getAQIColor(station.pm25);
            const marker = L.circleMarker(
                [station.lat, station.lng],
                {
                    radius: getStationSize(station.pm25),
                    fillColor: color,
                    color: '#000',
                    weight: 1,
                    opacity: 0.8,
                    fillOpacity: 0.7
                }
            );
            
            marker.bindPopup(`
                <div style="min-width: 220px">
                    <h3>${station.name}</h3>
                    <p><strong>PM2.5:</strong> ${station.pm25} Œºg/m¬≥</p>
                    <p><strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> ${getAQILevel(station.pm25)}</p>
                    <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> OpenAQ</p>
                    <p><em>–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}</em></p>
                </div>
            `);
            
            marker.addTo(airQualityLayer);
        });
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –ø–æ–∂–∞—Ä–æ–≤
function addFireClusters() {
    // –ö–ª–∞—Å—Ç–µ—Ä –≤ –ê–º–∞–∑–æ–Ω–∏–∏ (–ë—Ä–∞–∑–∏–ª–∏—è)
    const amazonFires = [
        { lat: -3.4653, lng: -62.2159, intensity: 450 }, // –ú–∞–Ω–∞—É—Å
        { lat: -5.4026, lng: -63.1238, intensity: 520 },
        { lat: -7.3681, lng: -63.1864, intensity: 480 },
        { lat: -4.4419, lng: -61.4472, intensity: 390 },
        { lat: -6.7833, lng: -58.1667, intensity: 510 },
        { lat: -8.7612, lng: -63.9039, intensity: 470 },
        { lat: -10.9472, lng: -61.8569, intensity: 430 }
    ];
    
    // –ö–ª–∞—Å—Ç–µ—Ä –≤ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏ (—Å–µ–ª—å—Å–∫–∏–µ —Ä–∞–π–æ–Ω—ã)
    const australiaFires = [
        { lat: -32.9283, lng: 151.7817, intensity: 490 }, // –ù–æ–≤—ã–π –Æ–∂–Ω—ã–π –£—ç–ª—å—Å
        { lat: -34.0833, lng: 150.8000, intensity: 510 },
        { lat: -36.0633, lng: 146.9153, intensity: 460 }, // –í–∏–∫—Ç–æ—Ä–∏—è
        { lat: -37.4713, lng: 149.2300, intensity: 480 },
        { lat: -31.9535, lng: 115.8570, intensity: 420 }, // –ó–∞–ø–∞–¥–Ω–∞—è –ê–≤—Å—Ç—Ä–∞–ª–∏—è
        { lat: -33.8688, lng: 151.2093, intensity: 380 }, // –°–∏–¥–Ω–µ–π (–º–µ–Ω—å—à–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å)
        { lat: -27.4698, lng: 153.0251, intensity: 440 }  // –ë—Ä–∏—Å–±–µ–Ω
    ];
    
    // –ö–ª–∞—Å—Ç–µ—Ä –≤ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏
    const californiaFires = [
        { lat: 38.5759, lng: -121.4944, intensity: 410 }, // –°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ
        { lat: 37.7749, lng: -122.4194, intensity: 380 }, // –°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ
        { lat: 34.0522, lng: -118.2437, intensity: 390 }, // –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å
        { lat: 36.7783, lng: -119.4179, intensity: 430 }  // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –¥–æ–ª–∏–Ω–∞
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç—É
    [amazonFires, australiaFires, californiaFires].forEach(cluster => {
        cluster.forEach(fire => {
            const intensity = Math.min(Math.max(fire.intensity / 25, 8), 18);
            
            const marker = L.circleMarker(
                [fire.lat, fire.lng],
                {
                    radius: intensity,
                    fillColor: '#ff2222',
                    color: '#aa0000',
                    weight: 2,
                    opacity: 1,
                    fillOpacity: 0.8
                }
            );
            
            const region = getCountryByCoords(fire.lat, fire.lng);
            const date = new Date(Date.now() - Math.random() * 3 * 24 * 60 * 60 * 1000).toLocaleDateString('ru-RU');
            
            marker.bindPopup(`
                <div style="min-width: 240px">
                    <h3>üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ñ–ê–†</h3>
                    <p><strong>–†–µ–≥–∏–æ–Ω:</strong> ${region}</p>
                    <p><strong>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:</strong> ${fire.intensity}¬∞C</p>
                    <p><strong>–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã:</strong> –í–´–°–û–ö–ò–ô</p>
                    <p><strong>–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:</strong> ${date}</p>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ê–∫—Ç–∏–≤–Ω—ã–π, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è</p>
                    <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> NASA FIRMS + –º–µ—Å—Ç–Ω—ã–µ —Å–ª—É–∂–±—ã</p>
                    <p style="color: #ff4444; font-weight: bold;">‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ</p>
                </div>
            `);
            
            marker.addTo(fireLayer);
        });
    });
}

function showDemoFireData() {
    console.log('Showing demo fire data');
    const fireCounterElement = document.getElementById('fireCounter');
    if (fireCounterElement) {
        fireCounterElement.textContent = '2,847';
    }
    
    if (fireLayer) {
        fireLayer.clearLayers();
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∂–∞—Ä–æ–≤ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ê–≤—Å—Ç—Ä–∞–ª–∏—é –∏ –Æ–∂–Ω—É—é –ê–º–µ—Ä–∏–∫—É
        const globalFireRegions = [
            // –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ - 400 –ø–æ–∂–∞—Ä–æ–≤
            { name: "–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞", latMin: 25, latMax: 60, lngMin: -140, lngMax: -60, count: 400 },
            // –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ - 800 –ø–æ–∂–∞—Ä–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            { name: "–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞", latMin: -40, latMax: 10, lngMin: -80, lngMax: -40, count: 800 },
            // –ï–≤—Ä–æ–ø–∞ - 200 –ø–æ–∂–∞—Ä–æ–≤
            { name: "–ï–≤—Ä–æ–ø–∞", latMin: 35, latMax: 60, lngMin: -10, lngMax: 40, count: 200 },
            // –ê–∑–∏—è - 500 –ø–æ–∂–∞—Ä–æ–≤
            { name: "–ê–∑–∏—è", latMin: 10, latMax: 60, lngMin: 40, lngMax: 140, count: 500 },
            // –ê—Ñ—Ä–∏–∫–∞ - 300 –ø–æ–∂–∞—Ä–æ–≤
            { name: "–ê—Ñ—Ä–∏–∫–∞", latMin: -35, latMax: 35, lngMin: -20, lngMax: 50, count: 300 },
            // –ê–≤—Å—Ç—Ä–∞–ª–∏—è - 600 –ø–æ–∂–∞—Ä–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            { name: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", latMin: -40, latMax: -10, lngMin: 110, lngMax: 155, count: 600 },
            // –û—Å—Ç—Ä–æ–≤–∞ –Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–æ–π –ê–∑–∏–∏ - 47 –ø–æ–∂–∞—Ä–æ–≤
            { name: "–ò–Ω–¥–æ–Ω–µ–∑–∏—è", latMin: -10, latMax: 10, lngMin: 95, lngMax: 145, count: 47 }
        ];
        
        globalFireRegions.forEach(region => {
            for (let i = 0; i < region.count; i++) {
                const lat = region.latMin + Math.random() * (region.latMax - region.latMin);
                const lng = region.lngMin + Math.random() * (region.lngMax - region.lngMin);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –Ω–∞ —Å—É—à–µ
                if (!isOcean(lat, lng)) {
                    const brightness = 180 + Math.random() * 320;
                    const intensity = Math.min(Math.max(brightness / 25, 5), 15);
                    
                    const marker = L.circleMarker(
                        [lat, lng],
                        {
                            radius: intensity,
                            fillColor: '#ff4444',
                            color: '#cc0000',
                            weight: 1,
                            opacity: 0.9,
                            fillOpacity: 0.7
                        }
                    );
                    
                    const country = getCountryByCoords(lat, lng);
                    const date = new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toLocaleDateString('ru-RU');
                    
                    marker.bindPopup(`
                        <div style="min-width: 220px">
                            <h3>üî• –ê–∫—Ç–∏–≤–Ω—ã–π –ª–µ—Å–Ω–æ–π –ø–æ–∂–∞—Ä</h3>
                            <p><strong>–°—Ç—Ä–∞–Ω–∞:</strong> ${country}</p>
                            <p><strong>–†–µ–≥–∏–æ–Ω:</strong> ${region.name}</p>
                            <p><strong>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:</strong> ${Math.round(brightness)}¬∞C</p>
                            <p><strong>–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:</strong> ${date}</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ê–∫—Ç–∏–≤–Ω—ã–π</p>
                            <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> NASA FIRMS</p>
                            <p><em>–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}</em></p>
                        </div>
                    `);
                    
                    marker.addTo(fireLayer);
                }
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –ø–æ–∂–∞—Ä–æ–≤
        addFireClusters();
    }
}
// –î–û–ë–ê–í–ò–¢–¨ –ü–û–°–õ–ï —Ñ—É–Ω–∫—Ü–∏–∏ showDemoFireData():

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
function showRecyclingTab(tabName, event) {
    if (event) event.preventDefault();
    
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Ñ–æ—Ä–º—ã
    document.querySelectorAll('.recycling-form').forEach(form => {
        form.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é —Ñ–æ—Ä–º—É
    document.getElementById(tabName + 'Recycling').classList.add('active');
    
    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.calc-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    event.target.classList.add('active');
}

function calculateResourceSavings() {
    const paper = parseFloat(document.getElementById('paperWaste').value) || 0;
    const plastic = parseFloat(document.getElementById('plasticWaste').value) || 0;
    const glass = parseFloat(document.getElementById('glassWaste').value) || 0;
    const metal = parseFloat(document.getElementById('metalWaste').value) || 0;
    
    const savedTrees = paper * 17;
    const savedEnergy = (plastic * 5) + (glass * 3) + (metal * 8);
    const savedCO2 = (plastic * 1.5) + (glass * 0.3) + (metal * 4);
    const savedWater = paper * 100;
    
    const result = document.getElementById('recyclingResult');
    result.innerHTML = `
        <h3>üå± –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤</h3>
        <div class="savings-grid">
            <div class="saving-item">
                <span class="saving-icon">üå≥</span>
                <span class="saving-value">${savedTrees}</span>
                <span class="saving-label">–¥–µ—Ä–µ–≤—å–µ–≤ —Å–ø–∞—Å–µ–Ω–æ</span>
            </div>
            <div class="saving-item">
                <span class="saving-icon">‚ö°</span>
                <span class="saving-value">${savedEnergy}</span>
                <span class="saving-label">–∫–í—Ç¬∑—á —ç–Ω–µ—Ä–≥–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</span>
            </div>
            <div class="saving-item">
                <span class="saving-icon">üåç</span>
                <span class="saving-value">${savedCO2}</span>
                <span class="saving-label">–∫–≥ CO‚ÇÇ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ</span>
            </div>
            <div class="saving-item">
                <span class="saving-icon">üíß</span>
                <span class="saving-value">${savedWater}</span>
                <span class="saving-label">–ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</span>
            </div>
        </div>
        <p style="margin-top: 20px; font-style: italic;">
            –í–∞—à –≤–∫–ª–∞–¥ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç—ã –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üåü
        </p>
    `;
    result.style.display = 'block';
}

function calculateBatteriesSavings() {
    const batteries = parseInt(document.getElementById('batteriesCount').value) || 0;
    
    const savedLand = batteries * 20;
    const savedWater = batteries * 400;
    
    const result = document.getElementById('recyclingResult');
    result.innerHTML = `
        <h3>üîã –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç–∞—Ä–µ–µ–∫</h3>
        <div class="savings-grid">
            <div class="saving-item">
                <span class="saving-icon">üå±</span>
                <span class="saving-value">${savedLand}</span>
                <span class="saving-label">–º¬≤ –∑–µ–º–ª–∏ —Å–ø–∞—Å–µ–Ω–æ –æ—Ç –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è</span>
            </div>
            <div class="saving-item">
                <span class="saving-icon">üíß</span>
                <span class="saving-value">${savedWater}</span>
                <span class="saving-label">–ª–∏—Ç—Ä–æ–≤ —á–∏—Å—Ç–æ–π –≤–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</span>
            </div>
            <div class="saving-item">
                <span class="saving-icon">‚ò†Ô∏è</span>
                <span class="saving-value">${batteries}</span>
                <span class="saving-label">–æ–ø–∞—Å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ</span>
            </div>
        </div>
        <p style="margin-top: 20px; color: #ff6b6b; font-weight: bold;">
            ‚ö†Ô∏è 1 –±–∞—Ç–∞—Ä–µ–π–∫–∞ –∑–∞–≥—Ä—è–∑–Ω—è–µ—Ç 20 –º¬≤ –∑–µ–º–ª–∏ –∏ 400 –ª –≤–æ–¥—ã —Ç—è–∂–µ–ª—ã–º–∏ –º–µ—Ç–∞–ª–ª–∞–º–∏!
        </p>
    `;
    result.style.display = 'block';
}

function calculateBottlesSavings() {
    const plasticBottles = parseInt(document.getElementById('plasticBottles').value) || 0;
    const glassBottles = parseInt(document.getElementById('glassBottles').value) || 0;
    const aluminumCans = parseInt(document.getElementById('aluminumCans').value) || 0;
    
    const savedOil = plasticBottles * 0.2;
    const savedSand = glassBottles * 0.5;
    const savedEnergy = aluminumCans * 3;
    const totalItems = plasticBottles + glassBottles + aluminumCans;
    
    const result = document.getElementById('recyclingResult');
    result.innerHTML = `
        <h3>ü•§ –≠–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –æ—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏</h3>
        <div class="savings-grid">
            <div class="saving-item">
                <span class="saving-icon">üõ¢Ô∏è</span>
                <span class="saving-value">${savedOil.toFixed(1)}</span>
                <span class="saving-label">–ª–∏—Ç—Ä–æ–≤ –Ω–µ—Ñ—Ç–∏ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ</span>
            </div>
            <div class="saving-item">
                <span class="saving-icon">üèñÔ∏è</span>
                <span class="saving-value">${savedSand}</span>
                <span class="saving-label">–∫–≥ –ø–µ—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</span>
            </div>
            <div class="saving-item">
                <span class="saving-icon">‚ö°</span>
                <span class="saving-value">${savedEnergy}</span>
                <span class="saving-label">–∫–í—Ç¬∑—á —ç–Ω–µ—Ä–≥–∏–∏ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ</span>
            </div>
            <div class="saving-item">
                <span class="saving-icon">üì¶</span>
                <span class="saving-value">${totalItems}</span>
                <span class="saving-label">–µ–¥–∏–Ω–∏—Ü —É–ø–∞–∫–æ–≤–∫–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ</span>
            </div>
        </div>
        <p style="margin-top: 20px; font-style: italic;">
            –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∞–ª—é–º–∏–Ω–∏–µ–≤–æ–π –±–∞–Ω–∫–∏ —ç–∫–æ–Ω–æ–º–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤! üì∫
        </p>
    `;
    result.style.display = 'block';
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –ø–æ–∂–∞—Ä–æ–≤
function addFireClusters() {
    // –ö–ª–∞—Å—Ç–µ—Ä –≤ –ê–º–∞–∑–æ–Ω–∏–∏ (–ë—Ä–∞–∑–∏–ª–∏—è)
    const amazonFires = [
        { lat: -3.4653, lng: -62.2159, intensity: 450 }, // –ú–∞–Ω–∞—É—Å
        { lat: -5.4026, lng: -63.1238, intensity: 520 },
        { lat: -7.3681, lng: -63.1864, intensity: 480 },
        { lat: -4.4419, lng: -61.4472, intensity: 390 },
        { lat: -6.7833, lng: -58.1667, intensity: 510 },
        { lat: -8.7612, lng: -63.9039, intensity: 470 },
        { lat: -10.9472, lng: -61.8569, intensity: 430 }
    ];
    
    // –ö–ª–∞—Å—Ç–µ—Ä –≤ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏ (—Å–µ–ª—å—Å–∫–∏–µ —Ä–∞–π–æ–Ω—ã)
    const australiaFires = [
        { lat: -32.9283, lng: 151.7817, intensity: 490 }, // –ù–æ–≤—ã–π –Æ–∂–Ω—ã–π –£—ç–ª—å—Å
        { lat: -34.0833, lng: 150.8000, intensity: 510 },
        { lat: -36.0633, lng: 146.9153, intensity: 460 }, // –í–∏–∫—Ç–æ—Ä–∏—è
        { lat: -37.4713, lng: 149.2300, intensity: 480 },
        { lat: -31.9535, lng: 115.8570, intensity: 420 }, // –ó–∞–ø–∞–¥–Ω–∞—è –ê–≤—Å—Ç—Ä–∞–ª–∏—è
        { lat: -33.8688, lng: 151.2093, intensity: 380 }, // –°–∏–¥–Ω–µ–π (–º–µ–Ω—å—à–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å)
        { lat: -27.4698, lng: 153.0251, intensity: 440 }  // –ë—Ä–∏—Å–±–µ–Ω
    ];
    
    // –ö–ª–∞—Å—Ç–µ—Ä –≤ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏
    const californiaFires = [
        { lat: 38.5759, lng: -121.4944, intensity: 410 }, // –°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ
        { lat: 37.7749, lng: -122.4194, intensity: 380 }, // –°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ
        { lat: 34.0522, lng: -118.2437, intensity: 390 }, // –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å
        { lat: 36.7783, lng: -119.4179, intensity: 430 }  // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –¥–æ–ª–∏–Ω–∞
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç—É
    [amazonFires, australiaFires, californiaFires].forEach(cluster => {
        cluster.forEach(fire => {
            const intensity = Math.min(Math.max(fire.intensity / 25, 8), 18);
            
            const marker = L.circleMarker(
                [fire.lat, fire.lng],
                {
                    radius: intensity,
                    fillColor: '#ff2222',
                    color: '#aa0000',
                    weight: 2,
                    opacity: 1,
                    fillOpacity: 0.8
                }
            );
            
            const region = getCountryByCoords(fire.lat, fire.lng);
            const date = new Date(Date.now() - Math.random() * 3 * 24 * 60 * 60 * 1000).toLocaleDateString('ru-RU');
            
            marker.bindPopup(`
                <div style="min-width: 240px">
                    <h3>üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ñ–ê–†</h3>
                    <p><strong>–†–µ–≥–∏–æ–Ω:</strong> ${region}</p>
                    <p><strong>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:</strong> ${fire.intensity}¬∞C</p>
                    <p><strong>–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã:</strong> –í–´–°–û–ö–ò–ô</p>
                    <p><strong>–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:</strong> ${date}</p>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ê–∫—Ç–∏–≤–Ω—ã–π, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è</p>
                    <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> NASA FIRMS + –º–µ—Å—Ç–Ω—ã–µ —Å–ª—É–∂–±—ã</p>
                    <p style="color: #ff4444; font-weight: bold;">‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ</p>
                </div>
            `);
            
            marker.addTo(fireLayer);
        });
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function isOcean(lat, lng) {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–∫–µ–∞–Ω—ã
    if (lng >= -70 && lng <= 20 && lat >= -50 && lat <= 50) return true; // –ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π
    if ((lng >= 120 || lng <= -70) && lat >= -60 && lat <= 60) return true; // –¢–∏—Ö–∏–π
    if (lng >= 40 && lng <= 120 && lat >= -50 && lat <= 30) return true; // –ò–Ω–¥–∏–π—Å–∫–∏–π
    if (lat > 75) return true; // –°–µ–≤–µ—Ä–Ω—ã–π –õ–µ–¥–æ–≤–∏—Ç—ã–π
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ—Ä—è
    if (lng >= -5 && lng <= 36 && lat >= 30 && lat <= 45) return true; // –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–µ
    if (lng >= -90 && lng <= -60 && lat >= 10 && lat <= 25) return true; // –ö–∞—Ä–∏–±—Å–∫–æ–µ
    
    return false;
}

function getCountryByCoords(lat, lng) {
    if (lat >= 50 && lng >= 30 && lng <= 180) return "–†–æ—Å—Å–∏—è";
    if (lat >= 25 && lat <= 50 && lng >= -125 && lng <= -65) return "–°–®–ê";
    if (lat >= -35 && lat <= 5 && lng >= -80 && lng <= -45) return "–ë—Ä–∞–∑–∏–ª–∏—è";
    if (lat >= 35 && lat <= 60 && lng >= -10 && lng <= 40) return "–ï–≤—Ä–æ–ø–∞";
    if (lat >= 20 && lat <= 40 && lng >= 70 && lng <= 100) return "–ö–∏—Ç–∞–π/–ò–Ω–¥–∏—è";
    if (lat >= -35 && lat <= 35 && lng >= -20 && lng <= 50) return "–ê—Ñ—Ä–∏–∫–∞";
    if (lat >= -35 && lat <= -15 && lng >= 115 && lng <= 150) return "–ê–≤—Å—Ç—Ä–∞–ª–∏—è";
    if (lat >= 55 && lat <= 70 && lng >= -140 && lng <= -60) return "–ö–∞–Ω–∞–¥–∞";
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
}

function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    const bgColor = type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#ff9800';
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${bgColor};
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-weight: bold;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        max-width: 400px;
        font-size: 14px;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 5000);
}

function getStationSize(pm25) {
    return Math.max(6, Math.min(20, pm25 / 3));
}

function getAQIColor(pm25) {
    if (pm25 <= 12) return '#00e400';
    if (pm25 <= 35) return '#ffff00';
    if (pm25 <= 55) return '#ff7e00';
    if (pm25 <= 150) return '#ff0000';
    return '#8f3f97';
}

function getAQILevel(pm25) {
    if (pm25 <= 12) return '–•–æ—Ä–æ—à–æ';
    if (pm25 <= 35) return '–£–º–µ—Ä–µ–Ω–Ω–æ';
    if (pm25 <= 55) return '–ù–µ–∑–¥–æ—Ä–æ–≤–æ';
    if (pm25 <= 150) return '–û—á–µ–Ω—å –Ω–µ–∑–¥–æ—Ä–æ–≤–æ';
    return '–û–ø–∞—Å–Ω–æ';
}
// –î–û–ë–ê–í–ò–¢–¨ –ü–û–°–õ–ï —Ñ—É–Ω–∫—Ü–∏–∏ getAQILevel():

function calculateCarbonFootprint() {
    const carKm = parseFloat(document.getElementById('carKm').value) || 0;
    const electricity = parseFloat(document.getElementById('electricity').value) || 0;
    const flights = parseInt(document.getElementById('flights').value) || 0;
    
    const carEmissions = carKm * 12 * 0.12;
    const electricityEmissions = electricity * 12 * 0.5;
    const flightEmissions = flights * 200;
    
    const totalEmissions = carEmissions + electricityEmissions + flightEmissions;
    
    let level, message, color;
    if (totalEmissions < 2000) {
        level = "–ù–∏–∑–∫–∏–π";
        message = "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â—É—é —Å—Ä–µ–¥—É.";
        color = "#4CAF50";
    } else if (totalEmissions < 6000) {
        level = "–°—Ä–µ–¥–Ω–∏–π";
        message = "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.";
        color = "#FF9800";
    } else {
        level = "–í—ã—Å–æ–∫–∏–π";
        message = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –∞–≤–∏–∞–ø–µ—Ä–µ–ª–µ—Ç–æ–≤.";
        color = "#F44336";
    }
    
    const result = document.getElementById('carbonResult');
    result.innerHTML = `
        <h3>üåç –í–∞—à —É–≥–ª–µ—Ä–æ–¥–Ω—ã–π —Å–ª–µ–¥</h3>
        <div style="text-align: center; margin: 20px 0;">
            <div style="font-size: 3rem; font-weight: bold; color: ${color};">${Math.round(totalEmissions)} –∫–≥ CO‚ÇÇ</div>
            <div style="font-size: 1.2rem; color: ${color}; margin: 10px 0;">–£—Ä–æ–≤–µ–Ω—å: ${level}</div>
        </div>
        <div class="progress-bar">
            <div class="progress" style="width: ${Math.min(totalEmissions/10000*100, 100)}%; background: ${color};"></div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-bottom: 20px;">
            <span>0 –∫–≥</span>
            <span>10,000 –∫–≥</span>
        </div>
        <p>${message}</p>
        <h4>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤:</h4>
        <ul>
            <li>üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${Math.round(carEmissions)} –∫–≥ CO‚ÇÇ</li>
            <li>üí° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ: ${Math.round(electricityEmissions)} –∫–≥ CO‚ÇÇ</li>
            <li>‚úàÔ∏è –ü–µ—Ä–µ–ª–µ—Ç—ã: ${Math.round(flightEmissions)} –∫–≥ CO‚ÇÇ</li>
        </ul>
        <div style="background: #e8f5e8; padding: 15px; border-radius: 8px; margin-top: 15px;">
            <strong>üí° –°–æ–≤–µ—Ç—ã –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é —É–≥–ª–µ—Ä–æ–¥–Ω–æ–≥–æ —Å–ª–µ–¥–∞:</strong>
            <ul>
                <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–ª–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥</li>
                <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã</li>
                <li>–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤–∏–∞–ø–µ—Ä–µ–ª–µ—Ç–æ–≤</li>
                <li>–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏ –≤–º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ–∫</li>
            </ul>
        </div>
    `;
    result.style.display = 'block';
}

function refreshData() {
    console.log('Refreshing data...');
    loadAirQualityData();
    loadFireData();
}

document.addEventListener('visibilitychange', function() {
    if (!document.hidden) {
        refreshData();
    }
});

// –ù–ê–ô–¢–ò —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ –∏ –û–ë–ù–û–í–ò–¢–¨ –µ–≥–æ:

document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing app...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
    initMap();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const refreshButtons = document.querySelectorAll('.refresh-btn');
    refreshButtons.forEach(btn => {
        btn.addEventListener('click', refreshData);
    });
    
    // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
    const calcButtons = document.querySelectorAll('button[onclick*="calculate"]');
    calcButtons.forEach(btn => {
        const onclick = btn.getAttribute('onclick');
        if (onclick.includes('calculateCarbonFootprint')) {
            btn.addEventListener('click', calculateCarbonFootprint);
        } else if (onclick.includes('calculateResourceSavings')) {
            btn.addEventListener('click', calculateResourceSavings);
        } else if (onclick.includes('calculateBatteriesSavings')) {
            btn.addEventListener('click', calculateBatteriesSavings);
        } else if (onclick.includes('calculateBottlesSavings')) {
            btn.addEventListener('click', calculateBottlesSavings);
        }
    });
    
    // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
    const recyclingTabs = document.querySelectorAll('.calc-tab');
    recyclingTabs.forEach(tab => {
        tab.addEventListener('click', function(e) {
            const tabName = this.getAttribute('onclick').match(/showRecyclingTab\('([^']+)'/)[1];
            showRecyclingTab(tabName, e);
        });
    });
    
    // –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    setInterval(refreshData, 10 * 60 * 1000);
});
window.addEventListener('error', function(e) {
    console.error('Global error:', e.error);
});

window.addEventListener('unhandledrejection', function(e) {
    console.error('Unhandled promise rejection:', e.reason);
});
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
// === –ñ–ò–í–´–ï –î–ê–ù–ù–´–ï –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò ===

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∂–∏–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
const liveDataMetrics = {
    globalTemp: { value: 1.21, unit: "¬∞C", trend: 0.018, category: "climate" },
    seaLevel: { value: 103.2, unit: "–º–º", trend: 3.7, category: "climate" },
    arcticIce: { value: 4.28, unit: "–º–ª–Ω –∫–º¬≤", trend: -0.48, category: "climate" },
    co2Concentration: { value: 421.3, unit: "ppm", trend: 2.5, category: "climate" },
    airQuality: { value: 42.1, unit: "¬µg/m¬≥", trend: 1.2, category: "air" },
    ozoneLayer: { value: 286, unit: "–î–æ–±—Å–æ–Ω", trend: 0.5, category: "air" },
    freshWater: { value: 2.5, unit: "%", trend: -0.015, category: "water" },
    oceanAcidity: { value: 8.06, unit: "pH", trend: -0.002, category: "water" },
    livingPlanet: { value: -69, unit: "%", trend: -1.2, category: "bio" },
    forestLoss: { value: 10.1, unit: "–º–ª–Ω –≥–∞", trend: 1.1, category: "bio" },
    renewableEnergy: { value: 28.3, unit: "%", trend: 2.1, category: "energy" },
    energyEmissions: { value: 33.1, unit: "–ì—Ç CO‚ÇÇ", trend: 0.9, category: "energy" },
    activeFires: { value: 3847, unit: "", trend: 284, category: "additional" },
    industrialEmissions: { value: 8.7, unit: "–ì—Ç CO‚ÇÇ", trend: 1.2, category: "additional" },
    transportEmissions: { value: 7.3, unit: "–ì—Ç CO‚ÇÇ", trend: 1.8, category: "additional" },
    oceanPlastic: { value: 171, unit: "—Ç—Ä–ª–Ω —á–∞—Å—Ç–∏—Ü", trend: 3.9, category: "additional" }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∂–∏–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function initLiveData() {
    updateAllLiveData();
    setupEventListeners();
    startLiveUpdates();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
function updateAllLiveData() {
    Object.keys(liveDataMetrics).forEach(metricId => {
        updateMetricValue(metricId);
    });
    updateTimestamp();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
function updateMetricValue(metricId) {
    const metric = liveDataMetrics[metricId];
    const element = document.getElementById(metricId);
    
    if (element) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        const randomChange = (Math.random() - 0.5) * metric.trend * 0.1;
        const newValue = metric.value + randomChange;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        let displayValue;
        if (metricId === 'oceanAcidity') {
            displayValue = `pH ${newValue.toFixed(2)}`;
        } else if (metric.unit === '%' && metricId !== 'renewableEnergy') {
            displayValue = `${newValue.toFixed(1)}${metric.unit}`;
        } else if (metric.value > 1000) {
            displayValue = `${newValue.toFixed(1)} ${metric.unit}`;
        } else {
            displayValue = `${newValue.toFixed(2)} ${metric.unit}`;
        }
        
        element.textContent = displayValue;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        element.classList.add('updating');
        setTimeout(() => {
            element.classList.remove('updating');
        }, 1000);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const category = this.dataset.category;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
            filterCardsByCategory(category);
        });
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞
    document.querySelectorAll('.view-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const view = this.dataset.view;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            // –ú–µ–Ω—è–µ–º –≤–∏–¥
            toggleView(view);
        });
    });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function filterCardsByCategory(category) {
    const cards = document.querySelectorAll('.live-card');
    
    cards.forEach(card => {
        if (category === 'all' || card.classList.contains(category)) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∏–¥–∞–º–∏ —Å–µ—Ç–∫–∞/—Å–ø–∏—Å–æ–∫
function toggleView(view) {
    const container = document.querySelector('.live-cards');
    
    if (view === 'list') {
        container.classList.add('list-view');
    } else {
        container.classList.remove('list-view');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
function updateTimestamp() {
    const now = new Date();
    const timeString = `üïí –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;
    
    document.getElementById('updateTime').textContent = timeString;
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
function startLiveUpdates() {
    let countdown = 30;
    const progressBar = document.getElementById('updateProgress');
    const countdownElement = document.getElementById('countdown');
    
    const updateInterval = setInterval(() => {
        countdown--;
        countdownElement.textContent = countdown;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progress = ((30 - countdown) / 30) * 100;
        progressBar.style.width = `${progress}%`;
        
        if (countdown <= 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            updateAllLiveData();
            countdown = 30;
        }
    }, 1000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
    
    // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∂–∏–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (document.querySelector('.live-data')) {
        initLiveData();
    }
});
