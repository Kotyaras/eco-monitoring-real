// historical-map.js
class HistoricalPollutionMap {
  constructor() {
    this.currentYear = 2024;
    this.currentDataType = 'air'; // 'air' –∏–ª–∏ 'water'
    this.currentMarkers = [];
    this.initMap();
  }
  
  initMap() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã Leaflet
    this.map = L.map('pollutionMap').setView([55.7558, 37.6173], 3);
    
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '¬© OpenStreetMap'
    }).addTo(this.map);
    
    this.addTimelineControls();
    this.loadDataForYear(this.currentYear);
  }
  
  addTimelineControls() {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–æ–π
    const timelineHTML = `
      <div class="timeline-container">
        <h4>–ì–æ–¥: <span id="currentYearDisplay">${this.currentYear}</span></h4>
        <input type="range" id="yearSlider" min="1800" max="2024" value="${this.currentYear}" 
               class="timeline-slider">
        <div class="data-type-buttons">
          <button class="data-btn active" data-type="air">üå§Ô∏è –í–æ–∑–¥—É—Ö</button>
          <button class="data-btn" data-type="water">üåä –í–æ–¥–∞</button>
        </div>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É
    L.control.custom = function(options) {
      return new L.Control.Custom(options);
    };
    
    L.Control.Custom = L.Control.extend({
      onAdd: function(map) {
        const div = L.DomUtil.create('div', 'custom-control');
        div.innerHTML = timelineHTML;
        return div;
      }
    });
    
    L.control.custom({ position: 'bottomleft' }).addTo(this.map);
    
    // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupEventListeners();
  }
  
  setupEventListeners() {
    const yearSlider = document.getElementById('yearSlider');
    if (yearSlider) {
      yearSlider.addEventListener('input', (e) => {
        this.currentYear = parseInt(e.target.value);
        const yearDisplay = document.getElementById('currentYearDisplay');
        if (yearDisplay) {
          yearDisplay.textContent = this.currentYear;
        }
        this.loadDataForYear(this.currentYear);
      });
    }
    
    document.querySelectorAll('.data-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        document.querySelectorAll('.data-btn').forEach(b => b.classList.remove('active'));
        e.target.classList.add('active');
        this.currentDataType = e.target.dataset.type;
        this.loadDataForYear(this.currentYear);
      });
    });
  }
  
  async loadDataForYear(year) {
    try {
      console.log(`Loading ${this.currentDataType} data for year: ${year}`);
      const response = await fetch(`/.netlify/functions/historical-${this.currentDataType}?year=${year}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log(`Loaded ${this.currentDataType} data:`, data);
      this.renderDataOnMap(data);
      this.updateStats(data);
    } catch (error) {
      console.error('Error loading data:', error);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  
  renderDataOnMap(data) {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    this.clearMarkers();
    
    if (this.currentDataType === 'air') {
      this.renderAirQuality(data);
    } else {
      this.renderWaterQuality(data);
    }
  }
  
  clearMarkers() {
    if (this.currentMarkers && this.currentMarkers.length > 0) {
      this.currentMarkers.forEach(marker => {
        if (marker && this.map.hasLayer(marker)) {
          this.map.removeLayer(marker);
        }
      });
      this.currentMarkers = [];
    }
  }
  
  renderAirQuality(airData) {
    if (!airData.data || !Array.isArray(airData.data)) {
      console.error('Invalid air data format:', airData);
      return;
    }
    
    airData.data.forEach(station => {
      if (!station.coordinates || !station.measurements) return;
      
      const pm25Value = station.measurements.find(m => m.parameter === 'pm25')?.value || 0;
      const quality = this.getAirQualityByValue(pm25Value);
      
      const marker = L.circleMarker([station.coordinates.latitude, station.coordinates.longitude], {
        radius: this.getMarkerSize(pm25Value),
        fillColor: this.getAirQualityColor(quality),
        color: '#000',
        weight: 1,
        opacity: 0.8,
        fillOpacity: 0.7
      }).addTo(this.map);
      
      marker.bindPopup(`
        <div style="min-width: 200px;">
          <strong>${station.location}</strong><br>
          <strong>–ì–æ—Ä–æ–¥:</strong> ${station.city}<br>
          <strong>–ì–æ–¥:</strong> ${this.currentYear}<br>
          <strong>PM2.5:</strong> ${pm25Value} ¬µg/m¬≥<br>
          <strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> ${this.getAirQualityText(quality)}<br>
          ${airData.globalParameters ? `<strong>CO‚ÇÇ:</strong> ${airData.globalParameters.co2} ppm` : ''}
        </div>
      `);
      
      this.currentMarkers.push(marker);
    });
  }
  
  renderWaterQuality(waterData) {
    if (!waterData.points || !Array.isArray(waterData.points)) {
      console.error('Invalid water data format:', waterData);
      return;
    }
    
    waterData.points.forEach(point => {
      const marker = L.circleMarker([point.lat, point.lng], {
        radius: this.getMarkerSize(point.pollution),
        fillColor: this.getWaterQualityColor(point.pollution),
        color: '#000',
        weight: 1,
        opacity: 0.8,
        fillOpacity: 0.7
      }).addTo(this.map);
      
      marker.bindPopup(`
        <div style="min-width: 200px;">
          <strong>${point.name}</strong><br>
          <strong>–ì–æ–¥:</strong> ${waterData.year}<br>
          <strong>–ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ:</strong> ${point.pollution.toFixed(1)}%<br>
          <strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> ${this.getWaterQualityText(point.pollution)}<br>
          ${point.country ? `<strong>–°—Ç—Ä–∞–Ω–∞:</strong> ${point.country}` : ''}
        </div>
      `);
      
      this.currentMarkers.push(marker);
    });
  }
  
  getMarkerSize(value) {
    // –†–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
    if (this.currentDataType === 'air') {
      return Math.max(5, Math.min(20, value / 3));
    } else {
      return Math.max(5, Math.min(15, value / 6));
    }
  }
  
  getAirQualityByValue(pm25) {
    if (pm25 <= 12) return 'excellent';
    if (pm25 <= 35) return 'good';
    if (pm25 <= 55) return 'moderate';
    if (pm25 <= 150) return 'poor';
    return 'very-poor';
  }
  
  getAirQualityColor(quality) {
    const colors = {
      'excellent': '#00e400',
      'good': '#ffff00', 
      'moderate': '#ff7e00',
      'poor': '#ff0000',
      'very-poor': '#8f3f97'
    };
    return colors[quality] || '#cccccc';
  }
  
  getWaterQualityColor(pollution) {
    if (pollution < 20) return '#1e90ff';
    if (pollution < 40) return '#00ced1';
    if (pollution < 60) return '#ffa500';
    if (pollution < 80) return '#ff4500';
    return '#8b0000';
  }
  
  getAirQualityText(quality) {
    const texts = {
      'excellent': '–û—Ç–ª–∏—á–Ω–æ–µ',
      'good': '–•–æ—Ä–æ—à–µ–µ',
      'moderate': '–£–º–µ—Ä–µ–Ω–Ω–æ–µ', 
      'poor': '–ü–ª–æ—Ö–æ–µ',
      'very-poor': '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ'
    };
    return texts[quality] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
  
  getWaterQualityText(pollution) {
    if (pollution < 20) return '–û—Ç–ª–∏—á–Ω–æ–µ';
    if (pollution < 40) return '–•–æ—Ä–æ—à–µ–µ';
    if (pollution < 60) return '–£–º–µ—Ä–µ–Ω–Ω–æ–µ';
    if (pollution < 80) return '–ü–ª–æ—Ö–æ–µ';
    return '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ';
  }
  
  updateStats(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const statsYear = document.getElementById('statsYear');
    if (statsYear) {
      statsYear.textContent = this.currentYear;
    }
    
    if (this.currentDataType === 'air') {
      this.updateAirStats(data);
    } else {
      this.updateWaterStats(data);
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –±–ª–æ–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.toggleStatsVisibility();
  }
  
  updateAirStats(airData) {
    const co2Value = document.getElementById('co2Value');
    const so2Value = document.getElementById('so2Value');
    const no2Value = document.getElementById('no2Value');
    
    if (airData.globalParameters) {
      if (co2Value) co2Value.textContent = airData.globalParameters.co2;
      if (so2Value) so2Value.textContent = airData.globalParameters.so2;
      if (no2Value) no2Value.textContent = airData.globalParameters.no2;
    }
  }
  
  updateWaterStats(waterData) {
    const waterStationsCount = document.getElementById('waterStationsCount');
    const avgWaterPollution = document.getElementById('avgWaterPollution');
    
    if (waterStationsCount) waterStationsCount.textContent = waterData.totalPoints || waterData.points.length;
    if (avgWaterPollution && waterData.averagePollution) {
      avgWaterPollution.textContent = waterData.averagePollution.toFixed(1);
    }
  }
  
  toggleStatsVisibility() {
    const airStats = document.getElementById('airStats');
    const waterStats = document.getElementById('waterStats');
    const airLegend = document.getElementById('airLegend');
    const waterLegend = document.getElementById('waterLegend');
    
    if (airStats && waterStats && airLegend && waterLegend) {
      if (this.currentDataType === 'air') {
        airStats.style.display = 'block';
        waterStats.style.display = 'none';
        airLegend.style.display = 'block';
        waterLegend.style.display = 'none';
      } else {
        airStats.style.display = 'none';
        waterStats.style.display = 'block';
        airLegend.style.display = 'none';
        waterLegend.style.display = 'block';
      }
    }
  }
  
  showError(message) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å toast –∏–ª–∏ alert)
    console.error('Map Error:', message);
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π toast –≤–º–µ—Å—Ç–æ alert
    alert(message);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã
  if (document.getElementById('pollutionMap')) {
    window.historicalMap = new HistoricalPollutionMap();
  } else {
    console.error('Map container #pollutionMap not found');
  }
});
