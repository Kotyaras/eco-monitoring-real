// historical-map.js
class HistoricalPollutionMap {
  constructor() {
    this.currentYear = 2024;
    this.currentDataType = 'air'; // 'air' –∏–ª–∏ 'water'
    this.initMap();
  }
  
  initMap() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã Leaflet
    this.map = L.map('pollutionMap').setView([55.7558, 37.6173], 3);
    
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '¬© OpenStreetMap'
    }).addTo(this.map);
    
    this.addTimelineControls();
    this.loadDataForYear(this.currentYear);
  }
  
  addTimelineControls() {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–æ–π
    const timelineHTML = `
      <div class="timeline-container">
        <h4>–ì–æ–¥: <span id="currentYearDisplay">${this.currentYear}</span></h4>
        <input type="range" id="yearSlider" min="1800" max="2024" value="${this.currentYear}" 
               class="timeline-slider">
        <div class="data-type-buttons">
          <button class="data-btn active" data-type="air">üå§Ô∏è –í–æ–∑–¥—É—Ö</button>
          <button class="data-btn" data-type="water">üåä –í–æ–¥–∞</button>
        </div>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É
    L.control.custom = function(options) {
      return new L.Control.Custom(options);
    };
    
    L.Control.Custom = L.Control.extend({
      onAdd: function(map) {
        const div = L.DomUtil.create('div', 'custom-control');
        div.innerHTML = timelineHTML;
        return div;
      }
    });
    
    L.control.custom({ position: 'bottomleft' }).addTo(this.map);
    
    // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupEventListeners();
  }
  
  setupEventListeners() {
    document.getElementById('yearSlider').addEventListener('input', (e) => {
      this.currentYear = parseInt(e.target.value);
      document.getElementById('currentYearDisplay').textContent = this.currentYear;
      this.loadDataForYear(this.currentYear);
    });
    
    document.querySelectorAll('.data-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        document.querySelectorAll('.data-btn').forEach(b => b.classList.remove('active'));
        e.target.classList.add('active');
        this.currentDataType = e.target.dataset.type;
        this.loadDataForYear(this.currentYear);
      });
    });
  }
  
  async loadDataForYear(year) {
    try {
      const response = await fetch(`/.netlify/functions/historical-${this.currentDataType}?year=${year}`);
      const data = await response.json();
      this.renderDataOnMap(data);
    } catch (error) {
      console.error('Error loading data:', error);
    }
  }
  
  renderDataOnMap(data) {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    if (this.currentMarkers) {
      this.currentMarkers.forEach(marker => this.map.removeLayer(marker));
    }
    
    this.currentMarkers = [];
    
    if (this.currentDataType === 'air') {
      this.renderAirQuality(data);
    } else {
      this.renderWaterQuality(data);
    }
  }
  
  renderAirQuality(airData) {
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    const cities = [
      { lat: 55.7558, lng: 37.6176, name: "–ú–æ—Å–∫–≤–∞" },
      { lat: 59.9343, lng: 30.3351, name: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥" },
      { lat: 56.3269, lng: 44.0056, name: "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥" },
      // –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –≥–æ—Ä–æ–¥–æ–≤...
    ];
    
    cities.forEach(city => {
      const marker = L.circleMarker([city.lat, city.lng], {
        radius: 15,
        fillColor: this.getAirQualityColor(airData.quality),
        color: '#000',
        weight: 1,
        opacity: 1,
        fillOpacity: 0.8
      }).addTo(this.map);
      
      marker.bindPopup(`
        <strong>${city.name}</strong><br>
        –ì–æ–¥: ${this.currentYear}<br>
        –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞: ${this.getAirQualityText(airData.quality)}<br>
        CO‚ÇÇ: ${airData.co2} ppm
      `);
      
      this.currentMarkers.push(marker);
    });
  }
  
  renderWaterQuality(waterData) {
    waterData.points.forEach(point => {
      const marker = L.circleMarker([point.lat, point.lng], {
        radius: 10,
        fillColor: this.getWaterQualityColor(point.pollution),
        color: '#000',
        weight: 1,
        opacity: 1,
        fillOpacity: 0.8
      }).addTo(this.map);
      
      marker.bindPopup(`
        <strong>${point.name}</strong><br>
        –ì–æ–¥: ${waterData.year}<br>
        –£—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è: ${point.pollution.toFixed(1)}%
      `);
      
      this.currentMarkers.push(marker);
    });
  }
  
  getAirQualityColor(quality) {
    const colors = {
      'excellent': '#00e400',
      'good': '#ffff00', 
      'moderate': '#ff7e00',
      'poor': '#ff0000',
      'very-poor': '#8f3f97'
    };
    return colors[quality] || '#cccccc';
  }
  
  getWaterQualityColor(pollution) {
    if (pollution < 20) return '#1e90ff';
    if (pollution < 40) return '#00ced1';
    if (pollution < 60) return '#ffa500';
    if (pollution < 80) return '#ff4500';
    return '#8b0000';
  }
  
  getAirQualityText(quality) {
    const texts = {
      'excellent': '–û—Ç–ª–∏—á–Ω–æ–µ',
      'good': '–•–æ—Ä–æ—à–µ–µ',
      'moderate': '–£–º–µ—Ä–µ–Ω–Ω–æ–µ', 
      'poor': '–ü–ª–æ—Ö–æ–µ',
      'very-poor': '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ'
    };
    return texts[quality] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  window.historicalMap = new HistoricalPollutionMap();
});
