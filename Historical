// historical-map.js
class HistoricalPollutionMap {
    constructor() {
        this.currentYear = 2024;
        this.currentDataType = 'air';
        this.currentMarkers = [];
        this.initMap();
    }

    initMap() {
        const mapContainer = document.getElementById('pollutionMap');
        if (!mapContainer) return;

        try {
            this.map = L.map('pollutionMap').setView([30, 0], 2);
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors',
                maxZoom: 18
            }).addTo(this.map);

            this.setupEventListeners();
            this.loadDataForYear(this.currentYear);
        } catch (error) {
            console.error('Ошибка инициализации карты:', error);
        }
    }

    setupEventListeners() {
        const yearSlider = document.getElementById('yearSlider');
        const yearDisplay = document.getElementById('currentYearDisplay');
        
        if (yearSlider && yearDisplay) {
            yearSlider.addEventListener('input', (e) => {
                this.currentYear = parseInt(e.target.value);
                yearDisplay.textContent = this.currentYear;
                this.loadDataForYear(this.currentYear);
            });
        }

        document.querySelectorAll('.data-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.data-btn').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                this.currentDataType = e.target.dataset.type;
                this.loadDataForYear(this.currentYear);
            });
        });
    }

    loadDataForYear(year) {
        const data = this.getMockData(year);
        this.renderDataOnMap(data);
        this.updateStats(data);
    }

    getMockData(year) {
        if (this.currentDataType === 'air') {
            return this.getMockAirData(year);
        } else {
            return this.getMockWaterData(year);
        }
    }

    getMockAirData(year) {
        const cities = [
            // Европа (30 городов)
            { name: "Москва", lat: 55.7558, lng: 37.6173, country: "Россия" },
            { name: "Лондон", lat: 51.5074, lng: -0.1278, country: "Великобритания" },
            { name: "Париж", lat: 48.8566, lng: 2.3522, country: "Франция" },
            { name: "Берлин", lat: 52.5200, lng: 13.4050, country: "Германия" },
            { name: "Мадрид", lat: 40.4168, lng: -3.7038, country: "Испания" },
            { name: "Рим", lat: 41.9028, lng: 12.4964, country: "Италия" },
            { name: "Киев", lat: 50.4501, lng: 30.5234, country: "Украина" },
            { name: "Варшава", lat: 52.2297, lng: 21.0122, country: "Польша" },
            { name: "Прага", lat: 50.0755, lng: 14.4378, country: "Чехия" },
            { name: "Будапешт", lat: 47.4979, lng: 19.0402, country: "Венгрия" },
            { name: "Вена", lat: 48.2082, lng: 16.3738, country: "Австрия" },
            { name: "Амстердам", lat: 52.3676, lng: 4.9041, country: "Нидерланды" },
            { name: "Брюссель", lat: 50.8503, lng: 4.3517, country: "Бельгия" },
            { name: "Лиссабон", lat: 38.7223, lng: -9.1393, country: "Португалия" },
            { name: "Стокгольм", lat: 59.3293, lng: 18.0686, country: "Швеция" },
            { name: "Осло", lat: 59.9139, lng: 10.7522, country: "Норвегия" },
            { name: "Хельсинки", lat: 60.1699, lng: 24.9384, country: "Финляндия" },
            { name: "Копенгаген", lat: 55.6761, lng: 12.5683, country: "Дания" },
            { name: "Дублин", lat: 53.3498, lng: -6.2603, country: "Ирландия" },
            { name: "Загреб", lat: 45.8150, lng: 15.9819, country: "Хорватия" },
            { name: "София", lat: 42.6977, lng: 23.3219, country: "Болгария" },
            { name: "Бухарест", lat: 44.4268, lng: 26.1025, country: "Румыния" },
            { name: "Белград", lat: 44.7866, lng: 20.4489, country: "Сербия" },
            { name: "Афины", lat: 37.9838, lng: 23.7275, country: "Греция" },
            { name: "Стамбул", lat: 41.0082, lng: 28.9784, country: "Турция" },
            { name: "Минск", lat: 53.9045, lng: 27.5615, country: "Беларусь" },
            { name: "Рига", lat: 56.9496, lng: 24.1052, country: "Латвия" },
            { name: "Вильнюс", lat: 54.6872, lng: 25.2797, country: "Литва" },
            { name: "Таллин", lat: 59.4370, lng: 24.7536, country: "Эстония" },
            { name: "Кишинев", lat: 47.0105, lng: 28.8638, country: "Молдова" },

            // Азия (25 городов)
            { name: "Пекин", lat: 39.9042, lng: 116.4074, country: "Китай" },
            { name: "Шанхай", lat: 31.2304, lng: 121.4737, country: "Китай" },
            { name: "Токио", lat: 35.6762, lng: 139.6503, country: "Япония" },
            { name: "Осака", lat: 34.6937, lng: 135.5023, country: "Япония" },
            { name: "Сеул", lat: 37.5665, lng: 126.9780, country: "Южная Корея" },
            { name: "Пусан", lat: 35.1796, lng: 129.0756, country: "Южная Корея" },
            { name: "Дели", lat: 28.6139, lng: 77.2090, country: "Индия" },
            { name: "Мумбаи", lat: 19.0760, lng: 72.8777, country: "Индия" },
            { name: "Бангалор", lat: 12.9716, lng: 77.5946, country: "Индия" },
            { name: "Калькутта", lat: 22.5726, lng: 88.3639, country: "Индия" },
            { name: "Бангкок", lat: 13.7563, lng: 100.5018, country: "Таиланд" },
            { name: "Сингапур", lat: 1.3521, lng: 103.8198, country: "Сингапур" },
            { name: "Джакарта", lat: -6.2088, lng: 106.8456, country: "Индонезия" },
            { name: "Манила", lat: 14.5995, lng: 120.9842, country: "Филиппины" },
            { name: "Хошимин", lat: 10.8231, lng: 106.6297, country: "Вьетнам" },
            { name: "Ханой", lat: 21.0278, lng: 105.8342, country: "Вьетнам" },
            { name: "Куала-Лумпур", lat: 3.1390, lng: 101.6869, country: "Малайзия" },
            { name: "Дакка", lat: 23.8103, lng: 90.4125, country: "Бангладеш" },
            { name: "Карачи", lat: 24.8607, lng: 67.0011, country: "Пакистан" },
            { name: "Лахор", lat: 31.5204, lng: 74.3587, country: "Пакистан" },
            { name: "Тегеран", lat: 35.6892, lng: 51.3890, country: "Иран" },
            { name: "Дубай", lat: 25.2048, lng: 55.2708, country: "ОАЭ" },
            { name: "Абу-Даби", lat: 24.4539, lng: 54.3773, country: "ОАЭ" },
            { name: "Эр-Рияд", lat: 24.7136, lng: 46.6753, country: "Саудовская Аравия" },
            { name: "Багдад", lat: 33.3152, lng: 44.3661, country: "Ирак" },

            // Северная Америка (15 городов)
            { name: "Нью-Йорк", lat: 40.7128, lng: -74.0060, country: "США" },
            { name: "Лос-Анджелес", lat: 34.0522, lng: -118.2437, country: "США" },
            { name: "Чикаго", lat: 41.8781, lng: -87.6298, country: "США" },
            { name: "Хьюстон", lat: 29.7604, lng: -95.3698, country: "США" },
            { name: "Финикс", lat: 33.4484, lng: -112.0740, country: "США" },
            { name: "Филадельфия", lat: 39.9526, lng: -75.1652, country: "США" },
            { name: "Сан-Антонио", lat: 29.4241, lng: -98.4936, country: "США" },
            { name: "Сан-Диего", lat: 32.7157, lng: -117.1611, country: "США" },
            { name: "Даллас", lat: 32.7767, lng: -96.7970, country: "США" },
            { name: "Сан-Хосе", lat: 37.3382, lng: -121.8863, country: "США" },
            { name: "Торонто", lat: 43.6532, lng: -79.3832, country: "Канада" },
            { name: "Ванкувер", lat: 49.2827, lng: -123.1207, country: "Канада" },
            { name: "Монреаль", lat: 45.5017, lng: -73.5673, country: "Канада" },
            { name: "Мехико", lat: 19.4326, lng: -99.1332, country: "Мексика" },
            { name: "Гвадалахара", lat: 20.6597, lng: -103.3496, country: "Мексика" },

            // Южная Америка (10 городов)
            { name: "Сан-Паулу", lat: -23.5505, lng: -46.6333, country: "Бразилия" },
            { name: "Рио-де-Жанейро", lat: -22.9068, lng: -43.1729, country: "Бразилия" },
            { name: "Буэнос-Айрес", lat: -34.6037, lng: -58.3816, country: "Аргентина" },
            { name: "Лима", lat: -12.0464, lng: -77.0428, country: "Перу" },
            { name: "Богота", lat: 4.7110, lng: -74.0721, country: "Колумбия" },
            { name: "Сантьяго", lat: -33.4489, lng: -70.6693, country: "Чили" },
            { name: "Каракас", lat: 10.4806, lng: -66.9036, country: "Венесуэла" },
            { name: "Кито", lat: -0.1807, lng: -78.4678, country: "Эквадор" },
            { name: "Монтевидео", lat: -34.9011, lng: -56.1645, country: "Уругвай" },
            { name: "Сальвадор", lat: -12.9714, lng: -38.5014, country: "Бразилия" },

            // Африка (10 городов)
            { name: "Каир", lat: 30.0444, lng: 31.2357, country: "Египет" },
            { name: "Лагос", lat: 6.5244, lng: 3.3792, country: "Нигерия" },
            { name: "Киншаса", lat: -4.4419, lng: 15.2663, country: "ДР Конго" },
            { name: "Йоханнесбург", lat: -26.2041, lng: 28.0473, country: "ЮАР" },
            { name: "Найроби", lat: -1.2864, lng: 36.8172, country: "Кения" },
            { name: "Абиджан", lat: 5.3599, lng: -4.0083, country: "Кот-д'Ивуар" },
            { name: "Александрия", lat: 31.2001, lng: 29.9187, country: "Египет" },
            { name: "Аккра", lat: 5.6037, lng: -0.1870, country: "Гана" },
            { name: "Аддис-Абеба", lat: 9.0300, lng: 38.7400, country: "Эфиопия" },
            { name: "Кейптаун", lat: -33.9249, lng: 18.4241, country: "ЮАР" },

            // Австралия и Океания (5 городов)
            { name: "Сидней", lat: -33.8688, lng: 151.2093, country: "Австралия" },
            { name: "Мельбурн", lat: -37.8136, lng: 144.9631, country: "Австралия" },
            { name: "Брисбен", lat: -27.4698, lng: 153.0251, country: "Австралия" },
            { name: "Перт", lat: -31.9505, lng: 115.8605, country: "Австралия" },
            { name: "Окленд", lat: -36.8485, lng: 174.7633, country: "Новая Зеландия" }
        ];

        const data = cities.map(city => {
            const yearFactor = (year - 1800) / (2024 - 1800);
            const basePM25 = 5 + yearFactor * 45;
            const randomFactor = 0.7 + Math.random() * 0.6;
            const pm25 = Math.round(basePM25 * randomFactor);
            
            return {
                coordinates: { latitude: city.lat, longitude: city.lng },
                location: city.name,
                city: city.name,
                country: city.country,
                measurements: [
                    { parameter: 'pm25', value: pm25 },
                    { parameter: 'so2', value: Math.round(10 + yearFactor * 50) },
                    { parameter: 'no2', value: Math.round(8 + yearFactor * 42) }
                ]
            };
        });
        
        return {
            data: data,
            globalParameters: {
                co2: 280 + Math.round((year - 1800) * 0.67),
                so2: 5 + Math.round((year - 1800) * 0.23),
                no2: 3 + Math.round((year - 1800) * 0.19)
            }
        };
    }

    getMockWaterData(year) {
        const waterPoints = [
            // Реки Европы (15)
            { name: "Волга", lat: 56.1309, lng: 44.0002, country: "Россия", type: "river" },
            { name: "Дунай", lat: 45.2539, lng: 29.6581, country: "Европа", type: "river" },
            { name: "Рейн", lat: 51.9653, lng: 7.6213, country: "Германия", type: "river" },
            { name: "Сена", lat: 49.4333, lng: 1.0833, country: "Франция", type: "river" },
            { name: "Темза", lat: 51.4947, lng: -0.1083, country: "Великобритания", type: "river" },
            { name: "Эльба", lat: 53.5333, lng: 9.9833, country: "Германия", type: "river" },
            { name: "По", lat: 44.9667, lng: 12.4333, country: "Италия", type: "river" },
            { name: "Висла", lat: 54.3667, lng: 18.6667, country: "Польша", type: "river" },
            { name: "Днепр", lat: 46.5167, lng: 30.7333, country: "Украина", type: "river" },
            { name: "Дон", lat: 47.2167, lng: 39.7167, country: "Россия", type: "river" },
            { name: "Луара", lat: 47.2667, lng: -2.1667, country: "Франция", type: "river" },
            { name: "Гвадалквивир", lat: 36.7833, lng: -6.3500, country: "Испания", type: "river" },
            { name: "Тахо", lat: 38.8667, lng: -9.0000, country: "Португалия", type: "river" },
            { name: "Одер", lat: 53.5833, lng: 14.5833, country: "Германия", type: "river" },
            { name: "Шельда", lat: 51.4333, lng: 4.1000, country: "Бельгия", type: "river" },

            // Реки Азии (15)
            { name: "Янцзы", lat: 31.7833, lng: 121.9667, country: "Китай", type: "river" },
            { name: "Хуанхэ", lat: 37.5667, lng: 118.5333, country: "Китай", type: "river" },
            { name: "Ганг", lat: 22.5833, lng: 88.3667, country: "Индия", type: "river" },
            { name: "Инд", lat: 24.9167, lng: 67.0833, country: "Пакистан", type: "river" },
            { name: "Меконг", lat: 10.0333, lng: 105.7833, country: "Вьетнам", type: "river" },
            { name: "Амур", lat: 52.9667, lng: 141.0333, country: "Россия", type: "river" },
            { name: "Енисей", lat: 69.4000, lng: 86.1667, country: "Россия", type: "river" },
            { name: "Лена", lat: 72.3667, lng: 126.7667, country: "Россия", type: "river" },
            { name: "Обь", lat: 66.5000, lng: 66.5000, country: "Россия", type: "river" },
            { name: "Тигр", lat: 31.0000, lng: 47.4333, country: "Ирак", type: "river" },
            { name: "Евфрат", lat: 31.0000, lng: 47.4333, country: "Ирак", type: "river" },
            { name: "Брахмапутра", lat: 25.2000, lng: 89.7667, country: "Бангладеш", type: "river" },
            { name: "Иравади", lat: 16.5000, lng: 96.3333, country: "Мьянма", type: "river" },
            { name: "Салуин", lat: 16.5000, lng: 97.6000, country: "Мьянма", type: "river" },
            { name: "Чаупхрая", lat: 13.5333, lng: 100.5833, country: "Таиланд", type: "river" },

            // Реки Северной Америки (10)
            { name: "Миссисипи", lat: 29.9500, lng: -90.0667, country: "США", type: "river" },
            { name: "Миссури", lat: 38.8167, lng: -90.1500, country: "США", type: "river" },
            { name: "Колорадо", lat: 31.7833, lng: -114.7833, country: "США", type: "river" },
            { name: "Рио-Гранде", lat: 25.9333, lng: -97.1500, country: "США/Мексика", type: "river" },
            { name: "Юкон", lat: 62.5833, lng: -164.8000, country: "Канада/США", type: "river" },
            { name: "Маккензи", lat: 69.3333, lng: -133.9000, country: "Канада", type: "river" },
            { name: "Святого Лаврентия", lat: 49.0000, lng: -64.8000, country: "Канада", type: "river" },
            { name: "Колумбия", lat: 46.2500, lng: -124.0500, country: "США", type: "river" },
            { name: "Снейк", lat: 46.1833, lng: -119.0167, country: "США", type: "river" },
            { name: "Огайо", lat: 36.9833, lng: -89.1333, country: "США", type: "river" },

            // Реки Южной Америки (10)
            { name: "Амазонка", lat: -0.1667, lng: -49.0000, country: "Бразилия", type: "river" },
            { name: "Парана", lat: -33.9167, lng: -58.4167, country: "Аргентина", type: "river" },
            { name: "Ориноко", lat: 8.3333, lng: -62.6667, country: "Венесуэла", type: "river" },
            { name: "Сан-Франсиску", lat: -10.5000, lng: -36.4000, country: "Бразилия", type: "river" },
            { name: "Магдалена", lat: 11.1000, lng: -74.8500, country: "Колумбия", type: "river" },
            { name: "Уругвай", lat: -33.9167, lng: -58.4167, country: "Уругвай", type: "river" },
            { name: "Рио-Негро", lat: -35.1667, lng: -56.4167, country: "Уругвай", type: "river" },
            { name: "Токантинс", lat: -1.7500, lng: -49.1667, country: "Бразилия", type: "river" },
            { name: "Шингу", lat: -1.5000, lng: -51.8333, country: "Бразилия", type: "river" },
            { name: "Тапажос", lat: -2.4167, lng: -54.7000, country: "Бразилия", type: "river" },

            // Реки Африки (10)
            { name: "Нил", lat: 30.1000, lng: 31.6000, country: "Египет", type: "river" },
            { name: "Конго", lat: -6.0667, lng: 12.4333, country: "ДР Конго", type: "river" },
            { name: "Нигер", lat: 5.3167, lng: 6.4667, country: "Нигерия", type: "river" },
            { name: "Замбези", lat: -18.8333, lng: 36.2833, country: "Мозамбик", type: "river" },
            { name: "Оранжевая", lat: -28.6333, lng: 16.4500, country: "ЮАР", type: "river" },
            { name: "Лимпопо", lat: -25.2000, lng: 33.5500, country: "Мозамбик", type: "river" },
            { name: "Сенегал", lat: 15.7833, lng: -16.5167, country: "Сенегал", type: "river" },
            { name: "Гамбия", lat: 13.4667, lng: -16.5667, country: "Гамбия", type: "river" },
            { name: "Вольта", lat: 5.7667, lng: -0.1000, country: "Гана", type: "river" },
            { name: "Окаванго", lat: -18.7833, lng: 21.8500, country: "Ботсвана", type: "river" },

            // Озера мира (10)
            { name: "Байкал", lat: 53.5000, lng: 108.0000, country: "Россия", type: "lake" },
            { name: "Верхнее", lat: 47.7000, lng: -87.5000, country: "США/Канада", type: "lake" },
            { name: "Виктория", lat: -1.0000, lng: 33.0000, country: "Африка", type: "lake" },
            { name: "Гурон", lat: 44.8000, lng: -82.4000, country: "США/Канада", type: "lake" },
            { name: "Мичиган", lat: 44.0000, lng: -87.0000, country: "США", type: "lake" },
            { name: "Танганьика", lat: -6.0000, lng: 29.5000, country: "Африка", type: "lake" },
            { name: "Титикака", lat: -15.8000, lng: -69.4000, country: "Перу/Боливия", type: "lake" },
            { name: "Ньяса", lat: -12.0000, lng: 34.5000, country: "Африка", type: "lake" },
            { name: "Эри", lat: 42.2000, lng: -81.2000, country: "США/Канада", type: "lake" },
            { name: "Онтарио", lat: 43.7000, lng: -77.9000, country: "США/Канада", type: "lake" }
        ];
        
        const data = waterPoints.map(point => {
            const yearFactor = (year - 1800) / (2024 - 1800);
            const basePollution = 5 + yearFactor * 30;
            const randomFactor = 0.8 + Math.random() * 0.4;
            const pollution = basePollution * randomFactor;
            
            return {
                coordinates: { latitude: point.lat, longitude: point.lng },
                location: point.name,
                city: point.name,
                country: point.country,
                measurements: [
                    { parameter: 'pollution', value: pollution },
                    { parameter: 'ph', value: 6.5 + Math.random() * 1.5 },
                    { parameter: 'oxygen', value: 70 + Math.random() * 25 }
                ],
                pollution: pollution
            };
        });
        
        return {
            data: data,
            globalParameters: {
                averagePollution: data.reduce((sum, point) => sum + point.pollution, 0) / data.length,
                totalStations: data.length
            }
        };
    }

    renderDataOnMap(data) {
        this.clearMarkers();
        
        if (this.currentDataType === 'air') {
            this.renderAirQuality(data);
        } else {
            this.renderWaterQuality(data);
        }
    }

    clearMarkers() {
        if (this.currentMarkers && this.currentMarkers.length > 0) {
            this.currentMarkers.forEach(marker => {
                if (marker && this.map.hasLayer(marker)) {
                    this.map.removeLayer(marker);
                }
            });
            this.currentMarkers = [];
        }
    }

    renderAirQuality(airData) {
        if (!airData.data || !Array.isArray(airData.data)) return;

        airData.data.forEach(station => {
            if (!station.coordinates) return;

            const pm25Value = station.measurements.find(m => m.parameter === 'pm25')?.value || 0;
            const quality = this.getAirQualityByValue(pm25Value);

            const marker = L.circleMarker([station.coordinates.latitude, station.coordinates.longitude], {
                radius: 8,
                fillColor: this.getAirQualityColor(quality),
                color: '#000',
                weight: 1,
                opacity: 0.8,
                fillOpacity: 0.7
            }).addTo(this.map);

            marker.bindPopup(`
                <div style="min-width: 200px;">
                    <strong>${station.location}</strong><br>
                    <strong>Страна:</strong> ${station.country}<br>
                    <strong>Год:</strong> ${this.currentYear}<br>
                    <strong>PM2.5:</strong> ${pm25Value} µg/m³<br>
                    <strong>Качество:</strong> ${this.getAirQualityText(quality)}<br>
                    ${airData.globalParameters ? `<strong>Глобальный CO₂:</strong> ${airData.globalParameters.co2} ppm` : ''}
                </div>
            `);

            this.currentMarkers.push(marker);
        });
    }

    renderWaterQuality(waterData) {
        if (!waterData.data || !Array.isArray(waterData.data)) return;

        waterData.data.forEach(point => {
            if (!point.coordinates) return;

            const pollutionValue = point.pollution || point.measurements?.find(m => m.parameter === 'pollution')?.value || 0;
            const marker = L.circleMarker([point.coordinates.latitude, point.coordinates.longitude], {
                radius: 8,
                fillColor: this.getWaterQualityColor(pollutionValue),
                color: '#000',
                weight: 1,
                opacity: 0.8,
                fillOpacity: 0.7
            }).addTo(this.map);

            marker.bindPopup(`
                <div style="min-width: 200px;">
                    <strong>${point.location}</strong><br>
                    <strong>Страна:</strong> ${point.country}<br>
                    <strong>Год:</strong> ${this.currentYear}<br>
                    <strong>Загрязнение:</strong> ${pollutionValue.toFixed(1)}%<br>
                    <strong>Качество:</strong> ${this.getWaterQualityText(pollutionValue)}
                </div>
            `);

            this.currentMarkers.push(marker);
        });
    }

    getAirQualityByValue(pm25) {
        if (pm25 <= 12) return 'excellent';
        if (pm25 <= 35) return 'good';
        if (pm25 <= 55) return 'moderate';
        if (pm25 <= 150) return 'poor';
        return 'very-poor';
    }

    getAirQualityColor(quality) {
        const colors = {
            'excellent': '#00e400',
            'good': '#ffff00',
            'moderate': '#ff7e00',
            'poor': '#ff0000',
            'very-poor': '#8f3f97'
        };
        return colors[quality] || '#cccccc';
    }

    getWaterQualityColor(pollution) {
        if (pollution < 20) return '#1e90ff';
        if (pollution < 40) return '#00ced1';
        if (pollution < 60) return '#ffa500';
        return '#ff4500';
    }

    getAirQualityText(quality) {
        const texts = {
            'excellent': 'Отличное',
            'good': 'Хорошее',
            'moderate': 'Умеренное',
            'poor': 'Плохое',
            'very-poor': 'Очень плохое'
        };
        return texts[quality] || 'Неизвестно';
    }

    getWaterQualityText(pollution) {
        if (pollution < 20) return 'Отличное';
        if (pollution < 40) return 'Хорошее';
        if (pollution < 60) return 'Умеренное';
        return 'Плохое';
    }

    updateStats(data) {
        const statsYear = document.getElementById('statsYear');
        if (statsYear) {
            statsYear.textContent = this.currentYear;
        }

        if (this.currentDataType === 'air') {
            this.updateAirStats(data);
        } else {
            this.updateWaterStats(data);
        }

        this.toggleStatsVisibility();
    }

    updateAirStats(airData) {
        const co2Value = document.getElementById('co2Value');
        const so2Value = document.getElementById('so2Value');
        const no2Value = document.getElementById('no2Value');

        if (airData.globalParameters) {
            if (co2Value) co2Value.textContent = airData.globalParameters.co2;
            if (so2Value) so2Value.textContent = airData.globalParameters.so2;
            if (no2Value) no2Value.textContent = airData.globalParameters.no2;
        }
    }

    updateWaterStats(waterData) {
        const waterStationsCount = document.getElementById('waterStationsCount');
        const avgWaterPollution = document.getElementById('avgWaterPollution');

        if (waterData.data && Array.isArray(waterData.data)) {
            const totalPollution = waterData.data.reduce((sum, point) => {
                const pollution = point.pollution || point.measurements?.find(m => m.parameter === 'pollution')?.value || 0;
                return sum + pollution;
            }, 0);
            const averagePollution = totalPollution / waterData.data.length;

            if (waterStationsCount) waterStationsCount.textContent = waterData.data.length;
            if (avgWaterPollution) avgWaterPollution.textContent = averagePollution.toFixed(1);
        } else {
            if (waterStationsCount) waterStationsCount.textContent = '0';
            if (avgWaterPollution) avgWaterPollution.textContent = '0';
        }
    }

    toggleStatsVisibility() {
        const airStats = document.getElementById('airStats');
        const waterStats = document.getElementById('waterStats');

        if (this.currentDataType === 'air') {
            if (airStats) airStats.style.display = 'block';
            if (waterStats) waterStats.style.display = 'none';
        } else {
            if (airStats) airStats.style.display = 'none';
            if (waterStats) waterStats.style.display = 'block';
        }
    }
}

document.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('pollutionMap')) {
        try {
            window.historicalMap = new HistoricalPollutionMap();
        } catch (error) {
            console.error('Ошибка при создании исторической карты:', error);
        }
    }
});
